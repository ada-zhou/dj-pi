//play/pause:

connect button - 

#define PLAY_BUTT = GPIO_PIN(NUMBER);

peripherals.c init function:

gpio_set_input(PLAY_BUTT);
gpio_set_pullup(PLAY_BUTT);


have function for returning button read

probably do it before each output in audio.c: if the button state has changed -> then PLAY/PAUSE is change









cross fade: 


add frequencies - if the time for the notes are different then the notes at that time for both should be added


#define VOLUME 0
#define SPEED_ONE 1

/*
#define SPEED_TWO 2

#define CROSSFADE 3
*/

int volume_read = mcp3008_read(VOLUME);
int speedread_one = mcp3008_read(SPEED_ONE);
/*
int speedread_two = mcp3008_read(SPEED_TWO);

int crossfade_read = mcp3008_read(CROSSFADE);
*/

in the method for outputting aduio:

speed:
timemultiplier = (speedread_one/10);

/*
//for crossfading: do buffer stuff - set up interrupts but with notes?
//resulting frequency at the time

int outputfrequency = freqOne * (crossfade_read/1024) + freqTwo * ((1024-crossfade_read)/1024);

*/

volume: 
wave *= (volumeread_one/6);


//

